<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Belle2软件使用小技巧</title>
    <link href="/2023/07/17/Belle2%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/07/17/Belle2%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>记录一些在使用belle2软件框架时，可以简化工作的小技巧 ：）</p><span id="more"></span><h1 id="后台下载gbasf2数据"><a href="#后台下载gbasf2数据" class="headerlink" title="后台下载gbasf2数据"></a>后台下载gbasf2数据</h1><p>首先配置好gbasf2环境</p><p>将下述脚本存入<code>download.sh</code>，输入<code>chmod a+x download.sh</code>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>rm -rf TMP.$&#123;1&#125;.list<br>touch TMP.$&#123;1&#125;.list<br>gb2_ds_list $1 &gt;&gt; TMP.$&#123;1&#125;.list<br><br>  <br>cat TMP.$&#123;1&#125;.list | grep -v &quot;#&quot; | while IFS=: read sub_address<br>do<br>    #use -f to avoid asking<br>    gb2_ds_get -f $&#123;sub_address&#125; &amp;<br>done<br><br>rm -rf TMP.$&#123;1&#125;.list<br></code></pre></td></tr></table></figure><p>在命令行中输入<code>nohup ./download.sh %project_name &amp;</code>即可将下载程序放入后台，退出终端后仍会继续下载，可以从输出的log文件<code>nohup.out</code>中看出一直在下载。</p><h2 id="To-do"><a href="#To-do" class="headerlink" title="To do"></a>To do</h2><ul><li><input disabled="" type="checkbox"> 分每个sub下载的输出log都全部放到了<code>nohup.out</code>文件中，有点混乱，虽然不影响下载文件</li></ul><h2 id="update-log"><a href="#update-log" class="headerlink" title="update log"></a>update log</h2><ul><li>2023.7.17: 修复同时在两个窗口运行的冲突问题</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>basf2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旧笔记本零件再利用项目</title>
    <link href="/2023/05/21/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%83%A8%E4%BB%B6%E5%86%8D%E5%88%A9%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/05/21/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%83%A8%E4%BB%B6%E5%86%8D%E5%88%A9%E7%94%A8%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>之前有一个暗影精灵的游戏本。因为南桥被烧坏了，不能正常使用了。重新装了一次南桥，结果撑了两天又坏了。然后，我就买了个新的笔记本。旧的笔记本卖了也卖不了多少钱，正好我又想要一个副屏，于是我就把笔记本全部拆了。</p><p>既然都拆下来了，就想着能不能更好地用笔记本这些还能正常运行的模块。于是，就打算开启一个旧笔记本部件再利用项目。</p><h1 id="旧显示屏再利用"><a href="#旧显示屏再利用" class="headerlink" title="旧显示屏再利用"></a>旧显示屏再利用</h1><p>利用方法：将其作为副屏使用</p><p>步骤：</p><ol><li>将屏幕拆下来，不同屏幕方法可能不一样</li><li>在淘宝买个驱动的板子，搜索“显示器 驱动”就行。还需要买电源线和HDMI转type-c的线。</li><li>将屏幕和驱动连接好</li></ol><p>之后还需要做个将副屏固定到大屏幕的连接件。</p><hr><p>持续更新……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站过程以及美化</title>
    <link href="/2023/05/20/hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/"/>
    <url>/2023/05/20/hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><ul><li><input disabled="" type="checkbox"> 域名备案</li><li><input disabled="" type="checkbox"> 首页自动获取诗句</li><li><input disabled="" type="checkbox"> 文章评论</li></ul><hr><p>终于，这个博客算是搭建起来了。一个精美的笔记本已经制作好了，接下来就需要好好地写点东西，以增加这个“笔记本”的价值。</p><p>这第一篇文章便是记录一下这个博客网站的建立过程。</p><p>本来是打算自己来写html文件的，但是后面发现这样的工作量太大，而且太浪费时间了。还是选取了一个比较简单的建站方法：利用hexo来建站。</p><p>为了让国内ip的访问速度变快，我买了个阿里云服务器，利用nginx将网站建立起来了。不过，现在还没有备案域名，只能通过服务器的公网ip进行访问（有点丑陋）。</p><p>我比较喜欢使用obsidian来记录一些笔记，于是我把博客的<code>_post</code>文件夹链接到了我的obsidian库中。这样，我就可以使用我喜欢的obsidian来进行文章的编辑了。</p><h1 id="hexo建站"><a href="#hexo建站" class="headerlink" title="hexo建站"></a>hexo建站</h1><h2 id="预先安装软件"><a href="#预先安装软件" class="headerlink" title="预先安装软件"></a>预先安装软件</h2><ul><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a></li><li><a href="https://nodejs.org/zh-cn/download">node.js</a></li></ul><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>安装hexo只需要一行命令：<code>npm install hexo-cli -g</code></p><p>新建<code>blog</code>文件夹，进入<code>blog</code>文件夹，打开终端，输入<code>hexo init</code>初始化博客。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>hexo g</code>： 生成博客；<br><code>hexo s</code> ：提供本地访问链接，可以进行检查；<br><code>hexo d</code>： 部署到云端；<br><code>hexo clean</code>：清除<code>hexo g</code>生成的静态博客文件；<br><code>hexo new page --path &lt;layout&gt;</code>：在<code>source</code>文件夹内创建一个新的页面</p><p>具体指令参考：<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p><h2 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h2><p>hexo自带了一个利用模板生成初始文章的命令，并还有draft和post功能。不过，我没有利用这一特性，而是直接在_post文件夹内创建md文件并写作。利用obsidian中的插入模板的功能，这样做也很方便。</p><h1 id="部署hexo博客"><a href="#部署hexo博客" class="headerlink" title="部署hexo博客"></a>部署hexo博客</h1><p>部署到云端需要设置<code>_config.yaml</code>源文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deploy:<br>  - type: git<br>    repo: git@github<span class="hljs-selector-class">.com</span>:xxx/xxx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br>    branch: master<br>  - type: git<br>    repo: root@xxx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xxx</span>:git/blog<span class="hljs-selector-class">.git</span><br>    branch: master<br></code></pre></td></tr></table></figure><p>type为同步工具，默认为git即可；repo为git仓库地址，是bare的仓库；branch直接写master就行了。<br>可以像上面这样写多个仓库，执行<code>hexo d</code>命令时会把本地生成的博客同步到每一个仓库。</p><h2 id="部署至github仓库"><a href="#部署至github仓库" class="headerlink" title="部署至github仓库"></a>部署至github仓库</h2><h2 id="部署至云服务器"><a href="#部署至云服务器" class="headerlink" title="部署至云服务器"></a>部署至云服务器</h2><h1 id="使用Fuild主题美化"><a href="#使用Fuild主题美化" class="headerlink" title="使用Fuild主题美化"></a>使用Fuild主题美化</h1><h1 id="使用obsidian编辑文章"><a href="#使用obsidian编辑文章" class="headerlink" title="使用obsidian编辑文章"></a>使用obsidian编辑文章</h1>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
